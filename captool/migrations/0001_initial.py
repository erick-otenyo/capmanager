# Generated by Django 3.2.4 on 2021-06-19 22:33

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtaildocs', '0012_uploadeddocument'),
    ]

    operations = [
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique ID. Auto generated on creation.', primary_key=True, serialize=False)),
                ('sender', models.CharField(help_text=' Identifies the originator of an alert. This can be an email of the institution for example', max_length=255)),
                ('sent', models.DateTimeField(help_text='Time and date of origination of the alert')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('actual', 'Actual'), ('test', 'Test'), ('exercise', 'Exercise'), ('system', 'System')], help_text='The code denoting the appropriate handling of the alert', max_length=50)),
                ('message_type', models.CharField(choices=[('alert', 'Alert'), ('update', 'Update'), ('cancel', 'Cancel'), ('ack', 'Acknowledge'), ('error', 'Error')], help_text='The code denoting the nature of the alert message', max_length=100)),
                ('scope', models.CharField(choices=[('public', 'Public'), ('restricted', 'Restricted'), ('private', 'Private')], help_text='The code denoting the intended distribution of the alert message', max_length=100)),
                ('source', models.TextField(blank=True, help_text='The text identifying the source of the alert message', null=True)),
                ('restriction', models.TextField(blank=True, help_text='The text describing the rule for limiting distribution of the restricted alert message. Used when scope value is Restricted', null=True)),
                ('code', models.CharField(blank=True, help_text='The code denoting the special handling of the alert message', max_length=100, null=True)),
                ('note', models.TextField(blank=True, help_text="The text describing the purpose or significance of the alert message.The message note is primarily intended for use with <status> 'Exercise' and <msgType> 'Error'", null=True)),
                ('language', models.CharField(blank=True, choices=[('en', 'English')], default='en', help_text='The code denoting the language of the alert message', max_length=100, null=True)),
                ('category', models.CharField(choices=[('geo', 'Geophysical'), ('met', 'Meteorological'), ('safety', 'General emergency and public safety'), ('security', 'Law enforcement, military, homeland and local/private security'), ('rescue', 'Rescue and recovery'), ('fire', 'Fire suppression and rescue'), ('health', 'Medical and public health'), ('env', 'Pollution and other environmental'), ('transport', 'Public and private transportation'), ('infra', 'Utility, telecommunication, other non-transport infrastructure'), ('cbrne', 'Chemical, Biological, Radiological, Nuclear or High-Yield Explosive threat or attack'), ('other', 'Other events')], help_text='The code denoting the category of the subject event of the alert message', max_length=100)),
                ('event', models.CharField(help_text='The text denoting the type of the subject event of the alert message', max_length=100)),
                ('urgency', models.CharField(choices=[('immediate', 'Responsive action SHOULD be taken immediately'), ('expected', 'Responsive action SHOULD be taken soon (within next hour)'), ('future', 'Responsive action SHOULD be taken in the near future'), ('past', 'Responsive action is no longer required'), ('unknown', 'Urgency not known')], help_text='The code denoting the urgency of the subject event of the alert message', max_length=100)),
                ('severity', models.CharField(choices=[('extreme', 'Extraordinary threat to life or property'), ('severe', 'Significant threat to life or property'), ('moderate', 'Possible threat to life or property'), ('minor', 'Minimal to no known threat to life or property'), ('unknown', 'Severity unknown')], help_text='The code denoting the severity of the subject event of the alert message', max_length=100)),
                ('certainty', models.CharField(choices=[('observed', 'Determined to have occurred or to be ongoing'), ('likely', 'Likely (percentage > ~50%)'), ('possible', 'Possible but not likely (percentage <= ~50%)'), ('unlikely', 'Not expected to occur (percentage ~ 0)'), ('unknown', 'Certainty unknown')], help_text='The code denoting the certainty of the subject event of the alert message', max_length=100)),
                ('audience', models.TextField(blank=True, help_text='The text describing the intended audience of the alert message', null=True)),
                ('effective', models.DateTimeField(blank=True, help_text='The effective time of the information of the alert message', null=True)),
                ('onset', models.DateTimeField(blank=True, help_text='The expected time of the beginning of the subject event of the alert message', null=True)),
                ('expires', models.DateTimeField(blank=True, help_text='The expiry time of the information of the alert message', null=True)),
                ('headline', models.TextField(blank=True, help_text='The text headline of the alert message', null=True)),
                ('description', models.TextField(blank=True, help_text='The text describing the subject event of the alert message', null=True)),
                ('instruction', models.TextField(blank=True, help_text='The text describing the recommended action to be taken by recipients of the alert message', null=True)),
                ('web', models.URLField(blank=True, help_text='The identifier of the hyperlink associating additional information with the alert message', null=True)),
                ('contact', models.TextField(blank=True, help_text='The text describing the contact for follow-up and confirmation of the alert message', null=True)),
                ('area_desc', models.TextField(help_text='The text describing the affected area of the alert message')),
                ('altitude', models.CharField(blank=True, help_text='The specific or minimum altitude of the affected area of the alert message', max_length=100, null=True)),
                ('ceiling', models.CharField(blank=True, help_text='The maximum altitude of the affected area of the alert message.MUST NOT be used except in combination with the altitude element. ', max_length=100, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlertResponseType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('response_type', models.CharField(choices=[('shelter', 'Take shelter in place or per instruction'), ('evacuate', 'Relocate as instructed in the instruction'), ('prepare', 'Relocate as instructed in the instruction'), ('execute', 'Execute a pre-planned activity identified in instruction'), ('avoid', 'Avoid the subject event as per the instruction'), ('monitor', 'Attend to information sources as described in instruction'), ('assess', 'Evaluate the information in this message - DONT USE FOR PUBLIC ALERTS'), ('all_clear', 'The subject event no longer poses a threat or concern and any follow on action is described in instruction'), ('None', 'No action recommended')], help_text='The code denoting the type of action recommended for the target audience', max_length=100)),
                ('alert', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_types', to='captool.alert')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlertResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('resource_type', models.CharField(blank=True, help_text='Resource type', max_length=100, null=True)),
                ('resource_desc', models.TextField(help_text='The text describing the type and content of the resource file')),
                ('link', models.URLField(blank=True, help_text='The identifier of the hyperlink for the resource file', null=True)),
                ('derefUri', models.TextField(blank=True, help_text='The base-64 encoded data content of the resource file', null=True)),
                ('digest', models.TextField(blank=True, help_text="The code representing the digital digest ('hash') computed from the resource file", null=True)),
                ('alert', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='captool.alert')),
                ('file', models.ForeignKey(blank=True, help_text='File, Document etc', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.document')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlertReferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('alert', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='references', to='captool.alert')),
                ('ref_alert', models.ForeignKey(blank=True, help_text='Earlier alert referenced by this alert', null=True, on_delete=django.db.models.deletion.PROTECT, to='captool.alert')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlertPolygon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='Label for the polygon', max_length=100)),
                ('polygon', models.TextField(help_text='The paired values of points defining a polygon that delineates the affected area of the alert message')),
                ('alert', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='polygons', to='captool.alert')),
            ],
        ),
        migrations.CreateModel(
            name='AlertIncident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.CharField(help_text='Title of the incident referent of the alert', max_length=255)),
                ('description', models.TextField(help_text='Description of the incident')),
                ('alert', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='incidents', to='captool.alert')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlertGeocode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name for the geocode', max_length=100)),
                ('value', models.CharField(help_text='Value of the geocode', max_length=255)),
                ('alert', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='geocodes', to='captool.alert')),
            ],
        ),
        migrations.CreateModel(
            name='AlertCircle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='Label for the circle', max_length=100)),
                ('circle', models.TextField(help_text='The paired values of a point and radius delineating the affected area of the alert message')),
                ('alert', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='circles', to='captool.alert')),
            ],
        ),
        migrations.CreateModel(
            name='AlertAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.TextField(help_text='Name of the recipient')),
                ('address', models.TextField(blank=True, help_text='Address/Email/Contact', null=True)),
                ('alert', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='captool.alert')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
